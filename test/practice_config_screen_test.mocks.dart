// Mocks generated by Mockito 5.4.4 from annotations
// in ft3/test/practice_config_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:ft3/app_rater.dart' as _i2;
import 'package:ft3/drill_data.dart' as _i5;
import 'package:ft3/practice_background.dart' as _i3;
import 'package:ft3/tracking_info.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AppRater].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppRater extends _i1.Mock implements _i2.AppRater {
  MockAppRater() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get available => (super.noSuchMethod(
        Invocation.getter(#available),
        returnValue: false,
      ) as bool);
  @override
  bool get shouldRequestReview => (super.noSuchMethod(
        Invocation.getter(#shouldRequestReview),
        returnValue: false,
      ) as bool);
  @override
  void requestReview() => super.noSuchMethod(
        Invocation.method(
          #requestReview,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PracticeBackground].
///
/// See the documentation for Mockito's code generation for more information.
class MockPracticeBackground extends _i1.Mock
    implements _i3.PracticeBackground {
  MockPracticeBackground() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get practicing => (super.noSuchMethod(
        Invocation.getter(#practicing),
        returnValue: false,
      ) as bool);
  @override
  int get reps => (super.noSuchMethod(
        Invocation.getter(#reps),
        returnValue: 0,
      ) as int);
  @override
  _i4.Stream<_i3.PracticeProgress> get progressStream => (super.noSuchMethod(
        Invocation.getter(#progressStream),
        returnValue: _i4.Stream<_i3.PracticeProgress>.empty(),
      ) as _i4.Stream<_i3.PracticeProgress>);
  @override
  _i4.Future<void> startPractice(_i5.DrillData? drill) => (super.noSuchMethod(
        Invocation.method(
          #startPractice,
          [drill],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> play() => (super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> stopPractice() => (super.noSuchMethod(
        Invocation.method(
          #stopPractice,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> trackResult(_i6.TrackingResult? result) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackResult,
          [result],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
